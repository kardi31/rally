<script src="/js/flip.js"></script>
<script src="/js/jquery.cookie.js"></script>
<link rel="stylesheet" href="/css/cards.css" />
<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        //create a new WebSocket object.
        var wsUri = "ws://188.116.32.114:9000/server.php";
        websocket = new WebSocket(wsUri);
        var user_id = '<?= $authenticatedUser['id']; ?>';
        var player_on_move;
        
        
        websocket.onopen = function (ev) { // connection is open 
            
            websocket.send(JSON.stringify({
                username: '<?= $authenticatedUser['username']; ?>',
                userid: '<?= $authenticatedUser['id']; ?>',
                type: 'joined'
            }));
        };



        //#### Message received from server
        websocket.onmessage = function (ev) {
            var msg = JSON.parse(ev.data); //PHP sends Json data
            var type = msg.type; //message type

            // when player on table
            // request display table for player
            // so opponent cards are hidden
            
            
            if(type!='showToggleTimer'){
                console.log(type);
            }
            if (type == 'getTableForPlayer')
            {
                if (typeof (msg.clearInterval) !== 'undefined' ) {
                    for (var i = 1; i < 99999; i++) {
                        window.clearInterval(i);
                    }
                  }
                var msg2 = {
                    type: 'getPlayerTable',
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg2));
                  
            }
            
            if (type == 'getTableJustForPlayer')
            {
            
                if (typeof (msg.clearInterval) !== 'undefined' ) {
                    for (var i = 1; i < 99999; i++) {
                        window.clearInterval(i);
                    }
                }
                if (typeof (msg.user_id) !== 'undefined' && user_id == msg.user_id ) {
                    console.log('getTableJustForPlayer');
                    var msg2 = {
                        type: 'getPlayerTable',
                        userid: '<?= $authenticatedUser['id']; ?>'
                    };
                    websocket.send(JSON.stringify(msg2));
                }
                  
            }
            
            if(type == 'toggleTimer'){
            
                if(typeof (msg.on_move) !== 'undefined'&&typeof (msg.no_move_clock) == 'undefined'){
                    if(msg.on_move.whoShort == 1)
                    {
                        divEq = 0;
                        var secondEq = 1;
                    }
                    if(msg.on_move.whoShort == 2)
                    {
                        divEq = 1;
                        var secondEq = 0;
                    }
                    var toggleElement = $('.playerList span.playerTimer:eq('+divEq+')');


                    // clear second player interval
                    for (var i = 1; i < 9999; i++) {
                        window.clearInterval(i);
                    }

                    if(user_id==msg.on_move.user_id){
                        console.log(user_id + 'Toggle timer');
                        window.setTimeout(function(){
                            player_on_move = msg.on_move.who;
                            var countdown = 2 * 60 * 1000;
                            if(typeof(msg.on_move.ms) !== 'undefined'){
                                var countdown = msg.on_move.ms;
                            }
                            var interval = setInterval(function() {
                                countdown -= 1000;
                                var min = Math.floor(countdown / (60 * 1000));
                                var sec = Math.floor((countdown - (min * 60 * 1000)) / 1000);  //correct
                                toggleElement.html(min + " : " + sec);

                                    var msgExpired = {
                                        type: 'updateTimer',
                                        userid: msg.on_move.user_id,
                                        timer: min + " : " + sec
                                    };
                                    websocket.send(JSON.stringify(msgExpired));


                                if(countdown<1000){
                                    var msgExpired = {
                                        type: 'timeExpiredFull',
                                        expired: msg.on_move.whoShort,
                                        userid: '<?= $authenticatedUser['id']; ?>'
                                    };
                                    websocket.send(JSON.stringify(msgExpired));


                                    window.clearInterval(interval);
    //                                    console.log('done');
                                }
                            }, 1000);
                        },500);
                    }
                }
            }
            if(type == 'showToggleTimer'){
            
                if(typeof (msg.on_move) !== 'undefined'&&typeof (msg.no_move_clock) == 'undefined'){
                    if(msg.on_move.whoShort == 1)
                    {
                        divEq = 0;
                        var secondEq = 1;
                    }
                    if(msg.on_move.whoShort == 2)
                    {
                        divEq = 1;
                        var secondEq = 0;
                    }
                    var toggleElement = $('.playerList span.playerTimer:eq('+divEq+')');
                    toggleElement.html(msg.timer);

                }
            }
            if(type == 'getLeftTimer'){
                if(typeof (msg.user_id) !== 'undefined'&&msg.user_id == user_id){
                    var leftElement = $('.playerLeft span');
                    if(typeof(leftElement.html())!=='undefined'){
                        var msgLeftTimer = {
                            type: 'setLeftTimer',
                            timer: leftElement.html(),
                            userid: '<?= $authenticatedUser['id']; ?>'
                        };
                        websocket.send(JSON.stringify(msgLeftTimer));
                    }
                }
                
            }
            
            if(type == 'getTimer'){
                if(typeof (msg.on_move) !== 'undefined'&&msg.on_move.who != player_on_move&&typeof (msg.no_move_clock) == 'undefined'&&msg.on_move.who == user_id){
                    
                    if(msg.on_move.whoShort == 1)
                    {
                        divEq = 0;
                        var secondEq = 1;
                    }
                    if(msg.on_move.whoShort == 2)
                    {
                        divEq = 1;
                        var secondEq = 0;
                    }
                    var toggleElement = $('.playerList span.playerTimer:eq('+divEq+')');
                    var msgTimer = {
                        type: 'setTimer',
                        timer: toggleElement.html(),
                        userid: '<?= $authenticatedUser['id']; ?>'
                    };
                    websocket.send(JSON.stringify(msgTimer));
                }
            }
            
            if (type == 'playerLeft')
            {
                if (((typeof (msg.user_id2) !== 'undefined' && msg.user_id2 == user_id)||(typeof (msg.user_id) !== 'undefined' && msg.user_id == user_id))) {
                
                    for (var i = 1; i < 99999; i++) {
                        window.clearInterval(i);
                    }
                                        
                    var toggleElement = $('.playerList span.playerTimer:eq(0)');
                    var toggleElement2 = $('.playerList span.playerTimer:eq(1)');
                    var msgTimer = {
                        type: 'setRunAwayTimer',
                        timerPlayer1: toggleElement.html(),
                        timerPlayer2: toggleElement2.html(),
                        userid: '<?= $authenticatedUser['id']; ?>'
                    };
                    websocket.send(JSON.stringify(msgTimer));
                }
            }
            if (type == 'stopAllClocks')
            {
                for (var i = 1; i < 99999; i++) {
                    window.clearInterval(i);
                }
            }
            // if player won and table is finished
            if (type == 'playerWon')
            {
                
                for (var i = 1; i < 99999; i++) {
                    window.clearInterval(i);
                }
                console.log('playerWon');
                console.log(msg);
                if (typeof (msg.user_id) !== 'undefined' && msg.user_id == user_id) {
                    var tableid = msg.tableid;
                    window.location.hash = tableid;
                    $('.cardTableWrapper').html(msg.showTable);
                    
                    $('.cardUserBoxWrapper').hide();
                    $('.cardTableWrapper').show();
                }
                
                if (typeof (msg.user_id2) !== 'undefined' && msg.user_id2 == user_id) {
                    var tableid = msg.tableid;
                    window.location.hash = tableid;
                    $('.cardTableWrapper').html(msg.showTable2);
                    $('.cardUserBoxWrapper').hide();
                    $('.cardTableWrapper').show();
                }
            }

            // when player on table
            // show table for player
            // so opponent cards are hidden
            if (type == 'showTablePlayer')
            {
                    var message = msg.message;
                // flip just my cards, not opponent cards
                    var tableid = msg.tableid;
                    window.location.hash = tableid;
                    if(typeof (msg.user_id) !== 'undefined'&&msg.user_id == user_id){
                        $('.cardTableWrapper').html(msg.showTable);
                    }
                    if(typeof (msg.user_id2) !== 'undefined'&&msg.user_id2 == user_id){
                        $('.cardTableWrapper').html(msg.showTable2);
                    }
                    $('.playerCards div.playerCard.flipIt').flip({
                       trigger: 'manual'
                    });
                    
//                       if (window.location.href.indexOf("#") > -1) {
                $('.cardUserBoxWrapper').hide();
                $('.cardTableWrapper').show();
//            }
//            else {
//                $('.cardUserBoxWrapper').show();
//                $('.cardTableWrapper').hide();
//            }
                
  
                // move cards to middle of table
                // then flip it
                var elementPlayer1 = $('.playerCards.player1Cards div.playerCard.flipIt');
                elementPlayer1.before( "<div></div>" );
                elementPlayer1.css({"position": "absolute"});
                elementPlayer1.animate({
                        top: 167,
                        left: 290
                    },function(){
                        $(this).flip(true);
                });
                var elementPlayer2 = $('.playerCards.player2Cards div.playerCard.flipIt');
                elementPlayer2.before( "<div></div>" );
                elementPlayer2.css({"position": "absolute","top":525});
                elementPlayer2.animate({
                    top: 332,
                    left: 290     
                },function(){
                    $(this).flip(true);
                });
                // player who won this round
                if (typeof (msg.wonPlayer) !== 'undefined'){
                    
                   
                    window.setTimeout(function(){
                        
                        if(msg.wonPlayer=='player1'){
                            elementPlayer1.css({'z-index':10});
                            elementPlayer2.animate({
                                top: 167,
                                left: 290,
                                duration: 5000
                            },function(){
//                                    // unset variable for clock, so it can move on
                                    player_on_move = false;
//                                    // when animation finished, refresh table
                                    var msg5 = {
                                        type: 'getPlayerTable',
                                        refreshPoints: true,
                                        userid: '<?= $authenticatedUser['id']; ?>'
                                    };
                                    websocket.send(JSON.stringify(msg5));
                                    elementPlayer1.remove();
                                    elementPlayer2.remove();
                                    
//                                });
                            });
                        }
                        if(msg.wonPlayer=='player2'){
                            
                            elementPlayer2.css({'z-index':10});
                            elementPlayer1.animate({
                                top: 332,
                                left: 290,
                                duration: 5000
                            },function(){
                            
//                                    // unset variable for clock, so it can move on
                                    player_on_move = false;
                                    var msg6 = {
                                        type: 'getPlayerTable',
                                        refreshPoints: true,
                                        userid: '<?= $authenticatedUser['id']; ?>'
                                    };
                                    websocket.send(JSON.stringify(msg6));
                                    elementPlayer1.remove();
                                    elementPlayer2.remove();
                                    
                            });
                        }
                        if(msg.wonPlayer=='draw'){
                            elementPlayer1.css({'z-index':10});
                            elementPlayer2.animate({
                                top: 250,
                                left: 290,
                                duration: 5000
                            },function(){
//                                    
//                                    // unset variable for clock, so it can move on
                                    player_on_move = false;
//                                    // when animation finished, refresh table
                                    var msg5 = {
                                        type: 'getPlayerTable',
                                        refreshPoints: true,
                                        userid: '<?= $authenticatedUser['id']; ?>'
                                    };
                                    websocket.send(JSON.stringify(msg5));
                                    elementPlayer1.remove();
                                    elementPlayer2.remove();
//                                });
                            });
                        }
                    },3000);
                }   
//                
//                $("#stop").click(function(){
//                    $('.playerCards div.playerCard.flipIt').stop();
//                });
//                
//                var gameInformation = $('.gameInformation');
//                if(gameInformation.hasClass('startsGame')){
//                    var playerInfo = $(this).attr('data-rel');
//                }

                if (typeof (msg.leftTimer) !== 'undefined'){
                    var leftElement = $('.playerLeft span');
                    var countdown2 = 30 * 1000;
                    var interval = setInterval(function() {
                        countdown2 -= 1000;
                        var min = Math.floor(countdown2 / (60 * 1000));
                        var sec = Math.floor((countdown2 - (min * 60 * 1000)) / 1000);  //correct
                        leftElement.html(min + " : " + sec);
                        if(countdown2<0){
                            var msgExpired = {
                                type: 'timeExpired',
                                userid: '<?= $authenticatedUser['id']; ?>'
                            };
                            websocket.send(JSON.stringify(msgExpired));
                            window.clearInterval(interval);
                        }
                    }, 1000);
                }
                
                if(typeof (msg.remove_start_timer) !== 'undefined' && msg.remove_start_timer){
                    
                    for (var i = 1; i < 10; i++) {
                        window.clearInterval(i);
                    }
                }
                
                // if second user clicked start button, show timer
//                if(typeof (msg.started_user) !== 'undefined' && msg.started_user !== 'false' && msg.started_user){
//                    var timerValue = 10;
//                    
//                    var interval = setInterval(function() {
//                        $('.startGame').html('Start the game <br />' + timerValue);
//                        timerValue--;
//                        if(timerValue<0){
//                            clearInterval(interval);
//                        }
//                    }, 1000);
//                    
//                       
//                }
//                if(msg.started_user==user_id){
//                    console.log('in');
//                    $('.startGame').removeClass('startGameNow');
//                }

                if(typeof ($.cookie('smallBoxes')) != 'undefined'){
                    
                    console.log($.cookie('smallBoxes'));
                    var divRel = $.cookie('smallBoxes');
                    var menuItem = $('[data-rel="'+divRel+'"]');
                    var element = $('.'+divRel);
                    
                    $('.smallBoxes > ul li').removeClass('active');
                    menuItem.addClass('active');
            
                    $('.smallBoxes div').hide();
                    element.show();

                }
                
            }

            if (type == 'refreshTables')
            {
                
                var message = msg.message;
                if (typeof (msg.tableid) !== 'undefined' && typeof (msg.user_id) !== 'undefined') {
                    if (msg.user_id == user_id || (typeof (msg.user_id2) !== 'undefined' && msg.user_id2 == user_id)) {
                        var tableid = msg.tableid;
                        window.location.hash = tableid;
                        $('.cardTableWrapper').html(msg.showTable);
                    }
                }
                $('#cardTableList').html(message);
            }
            
            // if you join table - show table
            if (type == 'joinedTable')
            {
                
                var message = msg.message;
                if (typeof (msg.tableid) !== 'undefined' && typeof (msg.user_id) !== 'undefined') {
                    if (msg.user_id == user_id || (typeof (msg.user_id2) !== 'undefined' && msg.user_id2 == user_id)) {
                        var tableid = msg.tableid;
                        window.location.hash = tableid;
                        $('.cardTableWrapper').html(msg.showTable);
                    }
                }
            }
            // user left table
            if (type == 'userLeft')
            {
                var message = msg.message;
                $('#message_box').append("<div><span class=\"joined\" >" + message + " </span>");
            }
            // join the game,
            // ur name is displayed on player list
            if (type == 'refreshPlayers')
            {

                var message = msg.message;
                $('#cardUserList').html(message);
                $('.userList').html(msg.messageTable);
            }

            if(type == 'kickMeFromTable'){
                
                $('.cardUserBoxWrapper').show();
                $('.cardTableWrapper').hide();
                
                history.pushState("", document.title, window.location.pathname);
            }
            if(type == 'inviteUserToTable'){
                var inviteText = msg.inviteText;
                $('.listTableMsg').append(inviteText);
                
            }
            if(type == 'showStartTimer'){
                    var timerValue = 10;
                    
                    var interval = setInterval(function() {
                        $('.startGame').html('Start the game <br />' + timerValue);
                        timerValue--;
                        if(timerValue<0){
                            
                            var msg = {
                                type: 'playerNotStartedTable',
                                userid: user_id
                            };
                            websocket.send(JSON.stringify(msg));
                            
                            clearInterval(interval);
                        }
                    }, 1000);
            }
            
            if(type == 'showStartTimerNotForClick'){
                
                    var timerValue2 = 10;
                    $('.startGame').removeClass('.startGameNow');
                    $('.startGame').attr('disabled','disabled');
                    var interval2 = setInterval(function() {
                        $('.startGame').html("Waiting for other player to start <br />" + timerValue2);
                        timerValue2--;
                        if(timerValue2<0){
                            clearInterval(interval2);
                        }
                    }, 1000);
                    
            }

//            if (window.location.href.indexOf("#") > -1) {
//                $('.cardUserBoxWrapper').hide();
//                $('.cardTableWrapper').show();
//            }
//            else {
//                $('.cardUserBoxWrapper').show();
//                $('.cardTableWrapper').hide();
//            }

            $('#message').val(''); //reset text

        };

        websocket.onerror = function (ev) {
            var msg = {
                type: 'userLeft',
                userid: '<?= $authenticatedUser['id']; ?>'
            };
            websocket.send(JSON.stringify(msg));
        };
        websocket.onclose = function (ev) {
            var msg = {
                type: 'userLeft',
                userid: '<?= $authenticatedUser['id']; ?>'
            };
            websocket.send(JSON.stringify(msg));
        };
         window.onbeforeunload = function () {
            var msg = {
                type: 'firefoxUserLeft',
                userid: '<?= $authenticatedUser['id']; ?>'
            };
            websocket.send(JSON.stringify(msg));
        };
        websocket.close = function (ev) {
        };
        $('.cardTableWrapper').delegate('.playerCards:not(.done) div table tr:not(:first-of-type)','click',function () {
                var skillNo = $(this).index();
                var parentPlayerCards = $(this).parents('.playerCards');

                var parentCard = $(this).parents('.playerCards div.playerCard');

                var cardNo = parentCard.attr('data-rel');
                var cardUserId = parentPlayerCards.attr('data-id');
                
                if(parentPlayerCards.hasClass('player1Cards')){
                    var playerNo = 1;
                    var divEq = 0;
                }
                if(parentPlayerCards.hasClass('player2Cards')){
                    var playerNo = 2;
                    var divEq = 1;
                }
                
                var toggleElement = $('.playerList span.playerTimer:eq('+divEq+')');
                console.log(toggleElement);
                if (cardUserId == user_id) {
                    var msg = {
                        type: 'cardClicked',
                        cardNo: cardNo,
                        timer: toggleElement.html(),
                        skillNo: skillNo,
                        playerNo: playerNo,
                        userid: '<?= $authenticatedUser['id']; ?>'
                    };
                    websocket.send(JSON.stringify(msg));
                }
            });
            
             // when you want to start the game
            $('.cardTableWrapper').delegate('.startGameNow','click',function () {
                var msg = {
                    type: 'startTable',
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
            });
            
            $('.stop').delegate('#stopAnim','click',function () {
                $(this).addClass('st');
            });

            // when you join existing table
            
            $('.cardTableListWrapper').delegate('.joinSingleTable','click',function () {
                var tableid = $(this).attr('rel');
                var msg = {
                    type: 'existTableJoined',
                    tableid: tableid,
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
            });
            
             // close invitation
            
            $('.cardUserBoxWrapper').delegate('.closeInvitation','click',function () {
                console.log($(this).parent());
                $(this).parent().remove();
            });
            
            // join table from invite
            $('.cardUserBoxWrapper').delegate('.cardUserHeader .joinSingleTable','click',function () {
                var tableid = $(this).attr('data-table');
                var msg = {
                    type: 'existTableJoined',
                    tableid: tableid,
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
            });

            // quit ur table
            
            $('.cardTableWrapper').delegate('.closeTable','click',function () {
                var tableid = $(this).attr('rel');
                var msg = {
                    type: 'closeTable',
                    tableid: tableid,
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
                // remove hastag from the end
                history.pushState("", document.title, window.location.pathname);
                  
                $('.cardUserBoxWrapper').show();
                $('.cardTableWrapper').hide();
            });
            
            
            // kick player from table
            
            $('.cardTableWrapper').delegate('.kickPlayerFromTable','click',function () {
//                var kickuserid = $(this).attr('data-rel');
                var msg = {
                    type: 'kickPlayerFromTable',
//                    kickuserid: kickuserid,
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
                // remove hastag from the end
            });
            
            // invite other player
            
            $('.cardTableWrapper').delegate('.inviteToTable','click',function () {
                var invitedUser = $(this).attr('data-rel');
                var msg = {
                    type: 'inviteToTable',
                    invitedUser: invitedUser,
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
            });
            
            
        // create tables
        $('.cardUserHeader').delegate('#join-table','click',function () {
            var msg = {
                type: 'tableJoined',
                userid: '<?= $authenticatedUser['id']; ?>'
            };
            //convert and send data to server
            websocket.send(JSON.stringify(msg));
//            if (window.location.href.indexOf("#") > -1) {
                $('.cardUserBoxWrapper').hide();
                $('.cardTableWrapper').show();
//            }
//            else {
//                $('.cardUserBoxWrapper').show();
//                $('.cardTableWrapper').hide();
//            }
        });
        
        //smallBoxes 
        
        $('.cardTableWrapper').delegate('.smallBoxes > ul li','click',function () {
            var divRel = $(this).attr('data-rel');
            var menuItem = $(this);
            var element = $('.'+divRel);
            
            $('.smallBoxes > ul li').removeClass('active');
            menuItem.addClass('active');
            
            $('.smallBoxes div').hide();
            element.show();
            
            $.cookie("smallBoxes", divRel, {expires : 1,path    : '/'});
        });
        
    
    
    });
</script>

<span class="cardUserBoxWrapper">
    <h1><?= $this->translate('FastRally Card Game'); ?></h1>
    <div class="cardUserHeader">
        <span class="listTableMsg"></span>
        <button class="btn myBtn" id="join-table"><i class="fa fa-plus"></i> <?= $this->translate('Create new table'); ?></button>
    </div>
    <div class="cardTableListWrapper">
        <div class="message_box" id="cardTableList">
        </div>
    </div>

    <div class="cardUserListWrapper">
        <div class="message_box" id="cardUserList"> 
        </div>
    </div>
    <div class="clearfix"></div>
</span>
<!--<span class="cardUserBoxWrapper">
    <h1>FastRally Card Game </h1>
    <div class="cardUserHeader">
        
        <button class="btn myBtn" id="join-table"><i class="fa fa-plus"></i> Create new table</button>
    </div>
    <div class="cardTableListWrapper">
        <div class="message_box" id="cardTableList">
            <?php for($i=0;$i<15;$i++){ ?>
            <div class="cardTableBox">
                
                <button class="joinSingleTable btn btn-primary" rel="1">Join table</button>
                <div class="cardTablePlayers">
                    <div class="cardTablePlayer">kk33</div>
                        
                    <div class="cardTablePlayer">johndoe</div>
                </div>
                <img src="/images/table.png" />
                <div class="cardTableNo">#1</div>
            </div>
            <?php } ?>
</div>
    </div>

    <div class="cardUserListWrapper">
        <div class="message_box" id="cardUserList"> 
            <ul>
                <li>kk33 <span>#1</span></li>
                <li>k33 <span>#1</span></li>
            </ul>
        </div>
    </div>
    <div class="clearfix"></div>
</span>-->
<div class="cardTableWrapper" ></div>
<!--<div class="cardTableWrapper" style="display: block;">
   <div id="cardTable">
      <div class="player1Cards playerCards" data-id="28">
         <div id="player1card1" data-rel="1" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/suzuki_swift.JPG"><strong>Suzuki Swift Sport</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>8.7</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>195</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1568</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>136</td>
                  </tr>
               </tbody>
            </table>
         </div>
         <div id="player1card2" data-rel="2" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/alfa_romeo_junior.png"><strong>Alfa Romeo Junior</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>10.3</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>197</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1300</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>136</td>
                  </tr>
               </tbody>
            </table>
         </div>
         <div id="player1card3" data-rel="3" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/triumph_tr7.jpg"><strong>Triumph TR7</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>9.8</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>175</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1998</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>105</td>
                  </tr>
               </tbody>
            </table>
         </div>
         <div id="player1card4" data-rel="4" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/nissan_micra.jpg"><strong>Nissan Micra Sport</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>9.8</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>183</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1598</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>108</td>
                  </tr>
               </tbody>
            </table>
         </div>
         <div id="player1card5" data-rel="5" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/bmw318is.png"><strong>BMW 318is</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>9.7</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>212</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1895</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>138</td>
                  </tr>
               </tbody>
            </table>
         </div>
      </div>
      <div class="playField">
          <div class="gameInformation">Round 1 <span> player 1 starts the game</span></div>
      </div>
      <div class="player2Cards playerCards" data-id="37">
         <div id="player2card1" data-rel="1" class="playerCard"><img src="/images/card_back.png"></div>
         <div id="player2card2" data-rel="2" class="playerCard"><img src="/images/card_back.png"></div>
         <div id="player2card3" data-rel="3" class="playerCard"><img src="/images/card_back.png"></div>
         <div id="player2card4" data-rel="4" class="playerCard"><img src="/images/card_back.png"></div>
         <div id="player2card5" data-rel="5" class="playerCard"><img src="/images/card_back.png"></div>
      </div>
   </div>
   <div id="cardTableInfo">
      <button class="closeTable" rel="1">X</button>
      <div class="tableName">Table 1</div>
      <div class="playerList">
         <div>
            peop_1155951
            <div>0</div>
         </div>
         <div>
            kk33
            <div>0</div>
         </div>
      </div>
   </div>
</div>-->

<style>
    #cardTableInfo .tableName{
        background:#212121;
    }
    
    .cardTableWrapper{
        background:#504f4f;
    }
    
</style>

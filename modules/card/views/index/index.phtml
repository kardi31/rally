<script src="/js/flip.js"></script>
<a id="stop" href="javascript:void(0)" style="width:200px;height:50px;display:block;">Stop</a>


<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        //create a new WebSocket object.
        var wsUri = "ws://ral.localhost:9000/server.php";
        websocket = new WebSocket(wsUri);
        var user_id = '<?= $authenticatedUser['id']; ?>';
        var player_on_move;
        
        websocket.onopen = function (ev) { // connection is open 
            setInterval(function () {
                if (websocket.bufferedAmount == 0)
                    websocket.send("Keep alive from client");
            }, 30000);
//             var msg = {
//                type: 'refreshed',
//                userid: '<?= $authenticatedUser['id']; ?>'
//            };
//            //convert and send data to server
//            websocket.send(JSON.stringify(msg));
        };

        // create tables
        $('#join-table').click(function () {
            var msg = {
                type: 'tableJoined',
                userid: '<?= $authenticatedUser['id']; ?>'
            };
            //convert and send data to server
            websocket.send(JSON.stringify(msg));
        });




        //#### Message received from server
        websocket.onmessage = function (ev) {
            var msg = JSON.parse(ev.data); //PHP sends Json data
            var type = msg.type; //message type

            // request all needed data on first connection
            if (type == 'requestData') {
                var params = {
                    type: 'joined',
                    cards: '<?= $userCards; ?>',
                    username: '<?= $authenticatedUser['username']; ?>',
                    userid: '<?= $authenticatedUser['id']; ?>'
                }
                websocket.send(JSON.stringify(params));
            }
            
            
            // when player on table
            // request display table for player
            // so opponent cards are hidden
            if (type == 'getTableForPlayer')
            {
                var msg2 = {
                    type: 'getPlayerTable',
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg2));
                
                // if second user clicked start button, show timer
                if(typeof (msg.started_user) !== 'undefined' && msg.started_user != user_id){
                    var timerValue = 10;
                    var interval = setInterval(function() {
                        
                        $('.startGame').html('Start the game <br />' + timerValue);
                        timerValue--;
                        if(timerValue<0){
                            clearInterval(interval);
                        }
                    }, 1000);
                }
            }
            
            
            if(type == 'toggleTimer'){
                if(typeof (msg.on_move) !== 'undefined'&&msg.on_move.who != player_on_move&&typeof (msg.no_move_clock) == 'undefined'){
                    console.log('fafa - '+msg.on_move);
                    if(msg.on_move.whoShort == 1)
                    {
                        divEq = 0;
                        var secondEq = 2;
                    }
                    if(msg.on_move.whoShort == 2)
                    {
                        divEq = 2;
                        var secondEq = 0;
                    }
                    var toggleElement = $('.playerList div:eq('+divEq+') span');
                    
                    var secondElement = $('.playerList div:eq('+secondEq+') span');
                    window.setTimeout(function(){
                        player_on_move = msg.on_move.who;
                        var countdown = 2 * 60 * 1000;
                        if(typeof(msg.on_move.ms) !== 'undefined'){
                            console.log(msg.on_move.ms);
                            var countdown = msg.on_move.ms;
                        }
                        var interval = setInterval(function() {
                            countdown -= 1000;
                            var min = Math.floor(countdown / (60 * 1000));
                            var sec = Math.floor((countdown - (min * 60 * 1000)) / 1000);  //correct
                            toggleElement.html(min + " : " + sec);
                        }, 1000);
                    },500);
                }
                
            }
            
            // if player won and table is finished
            if (type == 'playerWon')
            {
                
                if (typeof (msg.user_id) !== 'undefined' && msg.user_id == user_id) {
                    var tableid = msg.tableid;
                    window.location.hash = tableid;
                    $('.cardTableWrapper').html(msg.showTable);
                }
                
                if (typeof (msg.user_id2) !== 'undefined' && msg.user_id2 == user_id) {
                    var tableid = msg.tableid;
                    window.location.hash = tableid;
                    $('.cardTableWrapper').html(msg.showTable2);
                }
            }

            // when player on table
            // show table for player
            // so opponent cards are hidden
            if (type == 'showTablePlayer')
            {
                var message = msg.message;
                // flip just my cards, not opponent cards
                if (typeof (msg.user_id) !== 'undefined' && msg.user_id == user_id) {

                    var tableid = msg.tableid;
                    window.location.hash = tableid;
                    $('.cardTableWrapper').html(msg.showTable);
                    $('.playerCards div.playerCard.flipIt').flip({
                       trigger: 'manual'
                    });
                    
                    
                }
                if (typeof (msg.user_id2) !== 'undefined' && msg.user_id2 == user_id) {

                    var tableid = msg.tableid;
                    window.location.hash = tableid;
                    $('.cardTableWrapper').html(msg.showTable2);
                    $('.playerCards div.playerCard.flipIt').flip({
                        trigger: 'manual'
                    });
                }
                
  
                // move cards to middle of table
                // then flip it
                var elementPlayer1 = $('.playerCards.player1Cards div.playerCard.flipIt');
                elementPlayer1.before( "<div></div>" );
                elementPlayer1.css({"position": "absolute"});
                elementPlayer1.animate({
                        top: 175,
                        left: 320
                    },function(){
                        $(this).flip(true);
                });
                var elementPlayer2 = $('.playerCards.player2Cards div.playerCard.flipIt');
                elementPlayer2.before( "<div></div>" );
                elementPlayer2.css({"position": "absolute","top":525});
                elementPlayer2.animate({
                    top: 350,
                    left: 320     
                },function(){
                    $(this).flip(true);
                });
                
                // player who won this round
                if (typeof (msg.wonPlayer) !== 'undefined'){
                    window.setTimeout(function(){
                        if(msg.wonPlayer=='player1'){
                            elementPlayer1.css({'z-index':10});
                            elementPlayer2.animate({
                                top: 175,
                                left: 325,
                                duration: 5000
                            },function(){
                                $('.playerCards div.playerCard.flipIt').animate({
                                    top:0,
                                    left:0,
                                    duration: 2000
                                },function(){
                                    
                                    // when animation finished, refresh table
                                    var msg = {
                                        type: 'getPlayerTable',
                                        refreshPoints: true,
                                        userid: '<?= $authenticatedUser['id']; ?>'
                                    };
                                    websocket.send(JSON.stringify(msg));
                                    elementPlayer1.remove();
                                    elementPlayer2.remove();
                                });
                            });
                        }
                        if(msg.wonPlayer=='player2'){
                            elementPlayer2.css({'z-index':10});
                            elementPlayer1.animate({
                                top: 350,
                                left: 320,
                                duration: 5000
                            },function(){
                                $('.playerCards div.playerCard.flipIt').animate({
                                    top:525,
                                    left:0,
                                    duration: 2000
                                },function(){
                                    var msg = {
                                        type: 'getPlayerTable',
                                        refreshPoints: true,
                                        userid: '<?= $authenticatedUser['id']; ?>'
                                    };
                                    websocket.send(JSON.stringify(msg));
                                    elementPlayer1.remove();
                                    elementPlayer2.remove();
                                });
                            });
                        }
                    },3000);
                }
                
                $("#stop").click(function(){
                    $('.playerCards div.playerCard.flipIt').stop();
                });
                
                var gameInformation = $('.gameInformation');
                if(gameInformation.hasClass('startsGame')){
                    var playerInfo = $(this).attr('data-rel');
                }
            }

            // if you join table - show table
            if (type == 'joinedTable')
            {
                var message = msg.message;
                if (typeof (msg.tableid) !== 'undefined' && typeof (msg.user_id) !== 'undefined') {
                    if (msg.user_id == user_id || (typeof (msg.user_id2) !== 'undefined' && msg.user_id2 == user_id)) {
                        var tableid = msg.tableid;
                        window.location.hash = tableid;
                        $('.cardTableWrapper').html(msg.showTable);
                    }
                }
                $('#cardTableList').html(message);
            }
            // user left table
            if (type == 'userLeft')
            {
                var message = msg.message;
                $('#message_box').append("<div><span class=\"joined\" >" + message + " </span>");
            }
            // join the game,
            // ur name is displayed on player list
            if (type == 'joined')
            {

                var message = msg.message;
                $('#cardUserList').html(message);
            }


            /*
             *  Buttons which appear later in game
             */


            $('.playerCards:not(.done) div table tr:not(:first-of-type)').click(function () {
                var skillNo = $(this).index();
                var parentPlayerCards = $(this).parents('.playerCards');

                var parentCard = $(this).parents('.playerCards div.playerCard');

                var cardNo = parentCard.attr('data-rel');
                var cardUserId = parentPlayerCards.attr('data-id');
                
                if(parentPlayerCards.hasClass('player1Cards')){
                    var playerNo = 1;
                    var divEq = 0;
                }
                if(parentPlayerCards.hasClass('player2Cards')){
                    var playerNo = 2;
                    var divEq = 2;
                }
                
                var toggleElement = $('.playerList div:eq('+divEq+') span');
                
                if (cardUserId == user_id) {
                    var msg = {
                        type: 'cardClicked',
                        cardNo: cardNo,
                        timer: toggleElement.html(),
                        skillNo: skillNo,
                        playerNo: playerNo,
                        userid: '<?= $authenticatedUser['id']; ?>'
                    };
                    websocket.send(JSON.stringify(msg));
                }
            });


            // when you want to start the game
            $('.startGame').click(function () {
                var msg = {
                    type: 'startTable',
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
                console.log('clickedStart');
                for (var i = 1; i < 99999; i++) {
                    window.clearInterval(i);
                    window.clearTimeout(i);
                }
            });

            // when you join existing table
            $('.joinSingleTable').click(function () {
                var tableid = $(this).attr('rel');
                var msg = {
                    type: 'existTableJoined',
                    tableid: tableid,
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
            });

            // quit ur table
            $('.closeTable').click(function () {
                var tableid = $(this).attr('rel');
                var msg = {
                    type: 'closeTable',
                    tableid: tableid,
                    userid: '<?= $authenticatedUser['id']; ?>'
                };
                websocket.send(JSON.stringify(msg));
                // remove hastag from the end
                history.pushState("", document.title, window.location.pathname);
            });

            
//        $('.playerCards > div.playerCard').flip({
//            trigger: 'manual'
//          });
//          $('.playerCards > div.playerCard').on('click',function(){
//              var element = $(this);
//              element.before( "<div></div>" );
//              element.css({"position": "absolute"});
//              element.animate({
//                top: 175,
//                left: 320     
//              },function(){
//                $(this).flip(true);
//              });
//          });

            if (window.location.href.indexOf("#") > -1) {
                $('.cardUserBoxWrapper').hide();
                $('.cardTableWrapper').show();
            }
            else {
                $('.cardUserBoxWrapper').show();
                $('.cardTableWrapper').hide();
            }

            $('#message').val(''); //reset text

        };

        websocket.onerror = function (ev) {
            $('#message_box').append("<div class=\"system_error\">Error Occurred - " + ev.data + "</div>");
        };
        websocket.onclose = function (ev) {

            var msg = {
                type: 'userLeft',
                userid: '<?= $authenticatedUser['id']; ?>'
            };
            websocket.send(JSON.stringify(msg));
        };
    });
</script>

<style>
    .tableName{
        background:red;
        padding:10px;
        text-align:center;
    }
    
    .closeTable{
        float:right;
    }
    
    .playerList > div:first-of-type{
        background:#fff;
        color:#333;
    }
    
    .playerList > div{
        padding:5px;
    }
    
    .playerList > div:nth-of-type(2){
        background:#0000ff;
        color:#fff;
    }
    
    .playerList > div:nth-of-type(2) div{
        color:#000;
    }
    
    .playerList div div{
        background:#868686;
        width:20px;
        float:right;
        margin-right:10px;
        text-align:center;
        font-size:16px;
    }
    
    
    .playerList div span{
        background:#868686;
        width:40px;
        float:right;
        margin-right:10px;
        text-align:center;
        font-size:16px;
        display:block;
    }
    
    .selectedCard{
        background:blue;
    }
    .currentPlayingSkill,.currentPlayingSkill td{
        background:red;
    }
    .cardTableWrapper{
        height:700px;
        width:1020px;
    }
    #cardTable{
        width:802px;
        float:left;
        height:700px;
        position:relative;
    }
    #cardTableInfo{
        width:210px;
        clear: right;
        float: right;
    }
    .playerCards{
        height:177px;
        width:100%;
        border:1px solid grey;
    }
    .playerCards th{
        position:relative;
    }
    .playerCards th strong{
        z-index:10000;
        position:absolute;
        bottom:0px;left:0px;
        background:rgba(0,0,0,0.6);
        width:100%;
        padding:5px 0px 5px 5px;
        font-size:12px;
    }
    .playerCards td{

        font-size:12px;
    }
    .playerCards th{
        background:#504f4f;
    }
    .playerCards img{
        max-width:100%;
    }
    .playerCards div{
        width:160px;
        float:left;
        height:175px;
    }
    .playerCards div.playerCard{
        background:#000;
    }
    .playCard{
        width:160px;
        border:1px solid red;
        height:175px;
        margin:0 auto;
    }
    .playField{
        height:350px;
        background: #686868;
    }
    .chat_wrapper {
        width: 700px;
        margin-right: auto;
        margin-left: auto;
        background: #CCCCCC;
        border: 1px solid #999999;
        float:left;
        padding: 10px;
        font: 12px 'lucida grande',tahoma,verdana,arial,sans-serif;
    }
    .chat_wrapper .message_box {
        background: #FFFFFF;
        height: 150px;
        overflow: auto;
        padding: 10px;
        border: 1px solid #999999;
    }
    .chat_wrapper .panel input{
        padding: 2px 2px 2px 5px;
    }
    .system_msg{color: #BDBDBD;font-style: italic;}
    .joined{color: #ff0000;font-style: italic;}
    .user_name{font-weight:bold;}
    .user_message{color: #88B6E0;}

    .cardUserListWrapper {
        width: 200px;
        background: #CCCCCC;
        color:#333;
        text-align:center;
        float:left;
        margin-left:10px;
        font: 12px 'lucida grande',tahoma,verdana,arial,sans-serif;
    }
    .cardTableListWrapper {
        width: 700px;
        background: #CCCCCC;
        color:#333;
        text-align:center;
        float:left;
        margin-left:10px;
        font: 12px 'lucida grande',tahoma,verdana,arial,sans-serif;
    }
    .gameInformation{
        background:#212121;
        display: inline-block;
        padding: .2em .6em .3em;
        font-weight: bold;
        color: #ffffff;
        text-align: center;
        vertical-align: baseline;
        width:25%;
        font-size:20px;
        margin-top:10%;
    }
    .gameInformation span{
        font-size:15px;
        display:block;
    }
    .cardUserListWrapper #cardUserList {
        background: #FFFFFF;
        min-height: 150px;
        overflow: auto;
        padding: 10px;
        border: 1px solid #999999;
    }
    .cardTableListWrapper #cardTableList {
        background: #FFFFFF;
        min-height: 150px;
        overflow: auto;
        padding: 10px;
        border: 1px solid #999999;
    }
    .cardTableWrapper{
        display:none;
    }

    .cardTableBox{
        width:25%;
        float:left;
        border:1px solid black;
    }
</style>
<span class="cardUserBoxWrapper">
    <div class="cardTableListWrapper">
        <button id="join-table">Create new table</button>
        <div class="message_box" id="cardTableList">
        </div>
    </div>

    <div class="cardUserListWrapper">
        <h4>User list</h4>
        <div class="message_box" id="cardUserList"></div>
    </div>
    <div class="clearfix"></div>
</span>
<div class="cardTableWrapper">
</div>
<!--<div class="cardTableWrapper" style="display: block;">
   <div id="cardTable">
      <div class="player1Cards playerCards" data-id="28">
         <div id="player1card1" data-rel="1" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/suzuki_swift.JPG"><strong>Suzuki Swift Sport</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>8.7</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>195</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1568</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>136</td>
                  </tr>
               </tbody>
            </table>
         </div>
         <div id="player1card2" data-rel="2" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/alfa_romeo_junior.png"><strong>Alfa Romeo Junior</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>10.3</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>197</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1300</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>136</td>
                  </tr>
               </tbody>
            </table>
         </div>
         <div id="player1card3" data-rel="3" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/triumph_tr7.jpg"><strong>Triumph TR7</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>9.8</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>175</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1998</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>105</td>
                  </tr>
               </tbody>
            </table>
         </div>
         <div id="player1card4" data-rel="4" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/nissan_micra.jpg"><strong>Nissan Micra Sport</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>9.8</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>183</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1598</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>108</td>
                  </tr>
               </tbody>
            </table>
         </div>
         <div id="player1card5" data-rel="5" class="playerCard">
            <table>
               <tbody>
                  <tr>
                     <th colspan="2"><img src="/media/cars/bmw318is.png"><strong>BMW 318is</strong></th>
                  </tr>
                  <tr>
                     <td>Acceleration</td>
                     <td>9.7</td>
                  </tr>
                  <tr>
                     <td>V-max</td>
                     <td>212</td>
                  </tr>
                  <tr>
                     <td>Capacity</td>
                     <td>1895</td>
                  </tr>
                  <tr>
                     <td>Horsepower</td>
                     <td>138</td>
                  </tr>
               </tbody>
            </table>
         </div>
      </div>
      <div class="playField">
          <div class="gameInformation">Round 1 <span> player 1 starts the game</span></div>
      </div>
      <div class="player2Cards playerCards" data-id="37">
         <div id="player2card1" data-rel="1" class="playerCard"><img src="/images/card_back.png"></div>
         <div id="player2card2" data-rel="2" class="playerCard"><img src="/images/card_back.png"></div>
         <div id="player2card3" data-rel="3" class="playerCard"><img src="/images/card_back.png"></div>
         <div id="player2card4" data-rel="4" class="playerCard"><img src="/images/card_back.png"></div>
         <div id="player2card5" data-rel="5" class="playerCard"><img src="/images/card_back.png"></div>
      </div>
   </div>
   <div id="cardTableInfo">
      <button class="closeTable" rel="1">X</button>
      <div class="tableName">Table 1</div>
      <div class="playerList">
         <div>
            peop_1155951
            <div>0</div>
         </div>
         <div>
            kk33
            <div>0</div>
         </div>
      </div>
   </div>
</div>-->

<style>
    #cardTableInfo .tableName{
        background:#212121;
    }
    
    .cardTableWrapper{
        background:#504f4f;
    }
    
</style>
